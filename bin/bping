#!/usr/bin/python

import argparse
import math
import os
import re
import subprocess
import sys
from textwrap import dedent, wrap

DEFAULT_VOLUME   = 0.05
DEFAULT_DURATION = 0.1

def parse_args():
    parser = argparse.ArgumentParser(
        description = "\n".join(wrap(dedent('''\
            Wrapper around ping to make it do a lot of beeping ;-)
            Pitch of beeps represents latency: concert A (440Hz) for
            10ms, going one octave up or down for every order of
            magnitude.
            '''))),
        epilog=epilog(),
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument('-v', '--volume', metavar='N', type=float,
                        help='volume of beep [%(default)s]', default = DEFAULT_VOLUME)
    parser.add_argument('-d', '--duration', metavar='SECS', type=float,
                        help='duration of beep [%(default)s]', default = DEFAULT_DURATION)

    if len(sys.argv) < 2:
        parser.print_help()
        sys.exit(1)

    return parser.parse_known_args()

def epilog():
    text  = 'Guide to conversion of latency to frequency:\n\n'
    text += '   %10s %11s\n' % ('Latency', 'Frequency')
    text += '     ' + '-' * 19 + '\n'
    for latency in (0.01, 0.1, 1, 10, 100, 1000, 10000):
        unit = 'ms'
        hlatency = latency
        if latency >= 1000:
            hlatency = latency / 1000
            unit = 's'
        text += '   %10s %9dHz\n' % (str(hlatency) + unit, frequency(latency))
    return text

def frequency(latency):
    return 440 * 2 ** (math.log10(latency) - 2)

def bip(frequency, duration, volume):
    subprocess.call(
        [
            'bip',
            '--volume',    str(volume),
            '--frequency', str(frequency),
            '--duration',  str(duration)
        ]
    )

def main():
    options, ping_args = parse_args()

    regexp = re.compile(r'time=(\d+(?:\.\d+)?)\s*(\w+)')

    ping = subprocess.Popen(['ping'] + ping_args, stdin=None, stdout=subprocess.PIPE)
    while True:
        if ping.poll():
            break
        line = ping.stdout.readline().decode()
        print(line, end='')
        m = regexp.search(line)
        if m:
            latency, unit = m.groups()
            if unit != 'ms':
                bip(440, duration=options.duration, volume = options.volume * 2)
                raise(RuntimeError, "Unrecognised unit: %s" % unit)
            freq = frequency(float(latency))
            bip(freq, options.duration, options.volume)

main()
